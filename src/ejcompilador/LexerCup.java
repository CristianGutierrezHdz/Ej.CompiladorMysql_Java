/* The following code was generated by JFlex 1.4.3 on 16/04/23 22:41 */



package ejcompilador;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/04/23 22:41 from the specification file
 * <tt>C:/Users/Criss/ARCHIVOS SSD/EJCompilador/src/ejcompilador/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 48,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    27, 40,  0,  0,  0, 44,  0, 47, 33, 34, 45, 41, 32, 42, 46, 43, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 31, 38, 37, 39,  0, 
     0,  5,  6, 21, 10,  8, 18, 17, 24, 12, 28, 14,  7, 22, 16, 19, 
    26, 29, 23,  9,  4, 20, 11, 13, 25, 15,  1, 35,  0, 36,  0, 30, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\24\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\1"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\1\1\0"+
    "\3\2\1\24\2\2\1\25\25\2\1\26\1\27\11\2"+
    "\1\30\1\2\1\31\14\2\1\0\1\32\1\33\1\34"+
    "\1\0\1\35\5\2\1\36\1\37\1\40\11\2\1\41"+
    "\3\2\1\42\15\2\1\43\5\2\1\44\1\45\4\2"+
    "\1\46\30\2\1\0\1\47\1\2\1\50\1\51\7\2"+
    "\1\52\1\2\1\53\1\54\1\55\3\2\1\56\1\2"+
    "\1\57\1\2\1\60\5\2\1\61\2\2\1\62\1\63"+
    "\5\2\1\0\1\64\6\2\1\65\2\2\1\66\10\2"+
    "\1\67\13\2\1\3\1\70\1\2\1\71\2\2\1\72"+
    "\1\2\1\0\1\73\17\2\1\74\1\2\1\75\1\76"+
    "\1\0\1\77\1\2\1\100\1\2\1\0\3\2\1\101"+
    "\7\2\1\102\12\2\1\103\3\2\1\104\1\0\1\105"+
    "\1\2\1\106\2\2\1\107\5\2\1\110\1\111\1\2"+
    "\1\112\3\0\1\2\1\0\1\2\1\113\1\0\1\114"+
    "\1\115\1\116\1\2\1\117\1\120\1\121\1\122\1\123"+
    "\2\2\1\0\1\2\1\124\5\2\1\125\1\0\4\2"+
    "\1\126\1\127\1\130\1\2\1\131\3\0\1\132\1\0"+
    "\1\2\1\0\2\2\1\133\1\0\2\2\1\134\1\2"+
    "\1\135\1\2\1\0\1\2\1\136\1\137\1\140\1\141"+
    "\1\0\1\142\1\143\1\0\1\144\1\145\2\2\1\0"+
    "\1\146\1\147\2\2\1\150\1\151\1\152\2\0\2\2"+
    "\1\0\1\153\1\2\1\154\1\0\1\155\1\156\1\157"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\160\1\0"+
    "\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\61\0\u04c9\0\u04fa\0\61\0\61\0\61\0\61"+
    "\0\u052b\0\u055c\0\u058d\0\61\0\61\0\61\0\61\0\61"+
    "\0\61\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\142\0\u06b3"+
    "\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b"+
    "\0\142\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\142\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\61\0\61\0\61\0\u1014\0\u05ef\0\u1045"+
    "\0\u1076\0\u10a7\0\u10d8\0\u1109\0\142\0\142\0\142\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\142\0\u12f3\0\u1324\0\u1355\0\142\0\u1386\0\u13b7\0\u13e8"+
    "\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570"+
    "\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8"+
    "\0\142\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f"+
    "\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7"+
    "\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f"+
    "\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7"+
    "\0\61\0\u1d18\0\142\0\142\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc"+
    "\0\u1e0d\0\u1e3e\0\u1e6f\0\142\0\u1ea0\0\142\0\142\0\142"+
    "\0\u1ed1\0\u1f02\0\u1f33\0\142\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7"+
    "\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\142\0\u211d\0\u214e"+
    "\0\142\0\142\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274"+
    "\0\142\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\142"+
    "\0\u23cb\0\u23fc\0\142\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1"+
    "\0\u2522\0\u2553\0\u2584\0\142\0\u25b5\0\u25e6\0\u2617\0\u2648"+
    "\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\61"+
    "\0\u27d0\0\u2801\0\142\0\u2832\0\u2863\0\142\0\u2894\0\u28c5"+
    "\0\142\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c"+
    "\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\u2ba4"+
    "\0\142\0\u2bd5\0\142\0\142\0\u2c06\0\142\0\u2c37\0\142"+
    "\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\142\0\u2d5d\0\u2d8e"+
    "\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\142\0\u2eb4\0\u2ee5"+
    "\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d"+
    "\0\142\0\u309e\0\u30cf\0\u3100\0\142\0\u3131\0\142\0\u3162"+
    "\0\142\0\u3193\0\u31c4\0\142\0\u31f5\0\u3226\0\u3257\0\u3288"+
    "\0\u32b9\0\142\0\142\0\u32ea\0\142\0\u331b\0\u334c\0\u337d"+
    "\0\u33ae\0\u33df\0\u3410\0\142\0\u3441\0\142\0\142\0\142"+
    "\0\u3472\0\142\0\142\0\142\0\142\0\142\0\u34a3\0\u34d4"+
    "\0\u3505\0\u3536\0\142\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b"+
    "\0\142\0\u365c\0\u368d\0\u36be\0\u36ef\0\u3720\0\142\0\142"+
    "\0\142\0\u3751\0\142\0\u3782\0\u37b3\0\u37e4\0\142\0\u3815"+
    "\0\u3846\0\u3877\0\u38a8\0\u38d9\0\142\0\u390a\0\u393b\0\u396c"+
    "\0\142\0\u399d\0\142\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\142"+
    "\0\142\0\142\0\u3a92\0\61\0\61\0\u3ac3\0\142\0\61"+
    "\0\u3af4\0\u3b25\0\u3b56\0\142\0\142\0\u3b87\0\u3bb8\0\61"+
    "\0\142\0\142\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad\0\142"+
    "\0\u3cde\0\61\0\u3d0f\0\142\0\142\0\61\0\u3d40\0\u3d71"+
    "\0\u3da2\0\u3dd3\0\u3e04\0\u3e35\0\142\0\u3e66\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\3"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\3\1\27"+
    "\1\30\1\3\1\31\1\5\3\3\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\5\62\0"+
    "\2\3\1\0\27\3\1\0\3\3\24\0\1\4\53\0"+
    "\1\53\5\0\1\5\27\0\1\5\4\0\1\33\17\0"+
    "\1\5\1\0\2\3\1\0\1\3\1\54\2\3\1\55"+
    "\3\3\1\56\6\3\1\57\3\3\1\60\3\3\1\0"+
    "\3\3\23\0\2\3\1\0\3\3\1\61\1\3\1\62"+
    "\1\63\5\3\1\64\3\3\1\65\6\3\1\0\3\3"+
    "\23\0\2\3\1\0\4\3\1\66\3\3\1\67\16\3"+
    "\1\0\3\3\23\0\2\3\1\0\4\3\1\70\3\3"+
    "\1\71\6\3\1\72\7\3\1\0\3\3\23\0\2\3"+
    "\1\0\3\3\1\73\10\3\1\74\12\3\1\0\3\3"+
    "\23\0\2\3\1\0\1\75\1\76\2\3\1\77\17\3"+
    "\1\100\2\3\1\0\3\3\23\0\2\3\1\0\1\3"+
    "\1\101\2\3\1\102\3\3\1\103\6\3\1\104\3\3"+
    "\1\105\3\3\1\0\3\3\23\0\2\3\1\0\1\3"+
    "\1\106\6\3\1\107\16\3\1\0\3\3\23\0\2\3"+
    "\1\0\14\3\1\110\1\3\1\111\10\3\1\0\3\3"+
    "\23\0\2\3\1\0\24\3\1\112\2\3\1\0\3\3"+
    "\23\0\2\3\1\0\4\3\1\113\22\3\1\0\3\3"+
    "\23\0\2\3\1\0\17\3\1\114\1\115\6\3\1\0"+
    "\3\3\23\0\2\3\1\0\23\3\1\116\3\3\1\0"+
    "\3\3\23\0\2\3\1\0\3\3\1\117\13\3\1\120"+
    "\1\121\2\3\1\122\3\3\1\0\3\3\23\0\2\3"+
    "\1\0\14\3\1\123\1\3\1\124\4\3\1\125\3\3"+
    "\1\0\3\3\23\0\2\3\1\0\5\3\1\126\6\3"+
    "\1\127\11\3\1\130\1\0\3\3\23\0\2\3\1\0"+
    "\17\3\1\131\3\3\1\132\1\133\2\3\1\0\3\3"+
    "\23\0\2\3\1\0\4\3\1\134\3\3\1\135\6\3"+
    "\1\136\7\3\1\0\3\3\23\0\2\3\1\0\1\3"+
    "\1\137\25\3\1\0\3\3\23\0\2\3\1\0\1\3"+
    "\1\140\21\3\1\141\3\3\1\0\3\3\25\0\1\33"+
    "\27\0\1\33\4\0\1\33\17\0\1\33\52\0\1\142"+
    "\53\0\1\143\1\0\1\144\56\0\1\145\60\0\1\144"+
    "\13\0\60\146\3\0\1\147\57\0\2\3\1\0\2\3"+
    "\1\150\24\3\1\0\3\3\23\0\2\3\1\0\25\3"+
    "\1\151\1\3\1\0\3\3\23\0\2\3\1\0\22\3"+
    "\1\152\4\3\1\0\3\3\23\0\2\3\1\0\20\3"+
    "\1\153\6\3\1\0\3\3\23\0\2\3\1\0\1\154"+
    "\26\3\1\0\3\3\23\0\2\3\1\0\21\3\1\155"+
    "\5\3\1\0\3\3\23\0\2\3\1\0\6\3\1\156"+
    "\20\3\1\0\3\3\23\0\2\3\1\0\6\3\1\157"+
    "\20\3\1\0\3\3\23\0\2\3\1\0\1\160\26\3"+
    "\1\0\3\3\23\0\2\3\1\0\1\161\14\3\1\162"+
    "\11\3\1\0\3\3\23\0\2\3\1\0\15\3\1\163"+
    "\11\3\1\0\3\3\23\0\2\3\1\0\16\3\1\164"+
    "\10\3\1\0\3\3\23\0\2\3\1\0\12\3\1\165"+
    "\7\3\1\166\4\3\1\0\3\3\23\0\2\3\1\0"+
    "\17\3\1\167\7\3\1\0\3\3\23\0\2\3\1\0"+
    "\5\3\1\170\21\3\1\0\3\3\23\0\2\3\1\0"+
    "\6\3\1\171\11\3\1\172\6\3\1\0\3\3\23\0"+
    "\2\3\1\0\17\3\1\173\7\3\1\0\3\3\23\0"+
    "\2\3\1\0\7\3\1\174\17\3\1\0\3\3\23\0"+
    "\2\3\1\0\1\175\2\3\1\176\23\3\1\0\3\3"+
    "\23\0\2\3\1\0\17\3\1\177\7\3\1\0\3\3"+
    "\23\0\2\3\1\0\1\200\26\3\1\0\3\3\23\0"+
    "\2\3\1\0\3\3\1\201\1\3\1\202\10\3\1\203"+
    "\2\3\1\204\5\3\1\0\3\3\23\0\2\3\1\0"+
    "\5\3\1\205\21\3\1\0\3\3\23\0\2\3\1\0"+
    "\20\3\1\206\6\3\1\0\3\3\23\0\2\3\1\0"+
    "\17\3\1\207\7\3\1\0\3\3\23\0\2\3\1\0"+
    "\3\3\1\210\17\3\1\211\3\3\1\0\3\3\23\0"+
    "\2\3\1\0\4\3\1\212\22\3\1\0\3\3\23\0"+
    "\2\3\1\0\1\213\4\3\1\214\1\215\5\3\1\216"+
    "\12\3\1\0\3\3\23\0\2\3\1\0\4\3\1\217"+
    "\3\3\1\220\16\3\1\0\3\3\23\0\2\3\1\0"+
    "\13\3\1\221\13\3\1\0\3\3\23\0\2\3\1\0"+
    "\1\222\26\3\1\0\3\3\23\0\2\3\1\0\3\3"+
    "\1\223\23\3\1\0\3\3\23\0\2\3\1\0\1\3"+
    "\1\224\15\3\1\225\7\3\1\0\3\3\23\0\2\3"+
    "\1\0\17\3\1\226\7\3\1\0\3\3\23\0\2\3"+
    "\1\0\23\3\1\227\3\3\1\0\3\3\23\0\2\3"+
    "\1\0\3\3\1\230\10\3\1\231\12\3\1\0\3\3"+
    "\23\0\2\3\1\0\17\3\1\232\7\3\1\0\3\3"+
    "\23\0\2\3\1\0\16\3\1\233\10\3\1\0\3\3"+
    "\23\0\2\3\1\0\6\3\1\234\20\3\1\0\3\3"+
    "\23\0\2\3\1\0\4\3\1\235\22\3\1\0\3\3"+
    "\23\0\2\3\1\0\10\3\1\236\16\3\1\0\3\3"+
    "\23\0\2\3\1\0\6\3\1\237\20\3\1\0\3\3"+
    "\23\0\2\3\1\0\3\3\1\240\10\3\1\241\5\3"+
    "\1\242\4\3\1\0\3\3\23\0\2\3\1\0\4\3"+
    "\1\243\22\3\1\0\3\3\23\0\2\3\1\0\1\3"+
    "\1\244\2\3\1\245\22\3\1\0\3\3\23\0\2\3"+
    "\1\0\7\3\1\246\4\3\1\247\1\3\1\250\7\3"+
    "\1\251\1\0\3\3\23\0\2\3\1\0\21\3\1\252"+
    "\5\3\1\0\3\3\23\0\2\3\1\0\3\3\1\253"+
    "\23\3\1\0\3\3\23\0\2\3\1\0\7\3\1\254"+
    "\17\3\1\0\3\3\23\0\2\3\1\0\5\3\1\255"+
    "\21\3\1\0\3\3\23\0\2\3\1\0\10\3\1\256"+
    "\6\3\1\257\7\3\1\0\3\3\24\0\1\260\56\0"+
    "\57\146\1\261\1\146\1\0\2\3\1\0\3\3\1\262"+
    "\23\3\1\0\3\3\23\0\2\3\1\0\1\263\26\3"+
    "\1\0\3\3\23\0\2\3\1\0\4\3\1\264\22\3"+
    "\1\0\3\3\23\0\2\3\1\0\14\3\1\265\12\3"+
    "\1\0\3\3\23\0\2\3\1\0\4\3\1\266\22\3"+
    "\1\0\3\3\23\0\2\3\1\0\17\3\1\267\7\3"+
    "\1\0\3\3\23\0\2\3\1\0\11\3\1\270\15\3"+
    "\1\0\3\3\23\0\2\3\1\0\10\3\1\271\16\3"+
    "\1\0\3\3\23\0\2\3\1\0\10\3\1\272\16\3"+
    "\1\0\3\3\23\0\2\3\1\0\1\273\26\3\1\0"+
    "\3\3\23\0\2\3\1\0\4\3\1\274\22\3\1\0"+
    "\3\3\23\0\2\3\1\0\10\3\1\275\16\3\1\0"+
    "\3\3\23\0\2\3\1\0\26\3\1\276\1\0\3\3"+
    "\23\0\2\3\1\0\4\3\1\277\22\3\1\0\3\3"+
    "\23\0\2\3\1\0\22\3\1\300\4\3\1\0\3\3"+
    "\23\0\2\3\1\0\23\3\1\301\3\3\1\0\3\3"+
    "\23\0\2\3\1\0\4\3\1\302\22\3\1\0\3\3"+
    "\23\0\2\3\1\0\4\3\1\303\22\3\1\0\3\3"+
    "\23\0\2\3\1\0\11\3\1\304\15\3\1\0\3\3"+
    "\23\0\2\3\1\0\1\3\1\305\2\3\1\306\22\3"+
    "\1\0\3\3\23\0\2\3\1\0\4\3\1\307\22\3"+
    "\1\0\3\3\23\0\2\3\1\0\21\3\1\310\5\3"+
    "\1\0\3\3\23\0\2\3\1\0\1\3\1\311\25\3"+
    "\1\0\3\3\23\0\2\3\1\0\3\3\1\312\4\3"+
    "\1\313\16\3\1\0\3\3\23\0\2\3\1\0\1\314"+
    "\26\3\1\0\3\3\23\0\2\3\1\0\2\3\1\315"+
    "\24\3\1\0\3\3\23\0\2\3\1\0\26\3\1\316"+
    "\1\0\3\3\23\0\2\3\1\0\20\3\1\317\6\3"+
    "\1\0\3\3\23\0\2\3\1\0\21\3\1\320\5\3"+
    "\1\0\3\3\23\0\2\3\1\0\11\3\1\321\15\3"+
    "\1\0\3\3\23\0\2\3\1\0\17\3\1\322\7\3"+
    "\1\0\3\3\23\0\2\3\1\0\4\3\1\323\22\3"+
    "\1\0\3\3\23\0\2\3\1\0\4\3\1\324\22\3"+
    "\1\0\3\3\23\0\2\3\1\0\4\3\1\325\22\3"+
    "\1\0\3\3\23\0\2\3\1\0\23\3\1\326\3\3"+
    "\1\0\3\3\23\0\2\3\1\0\3\3\1\327\23\3"+
    "\1\0\3\3\23\0\2\3\1\0\27\3\1\330\3\3"+
    "\23\0\2\3\1\0\3\3\1\331\23\3\1\0\3\3"+
    "\23\0\2\3\1\0\14\3\1\332\12\3\1\0\3\3"+
    "\23\0\2\3\1\0\20\3\1\333\6\3\1\0\3\3"+
    "\23\0\2\3\1\0\1\3\1\334\25\3\1\0\3\3"+
    "\23\0\2\3\1\0\4\3\1\335\22\3\1\0\3\3"+
    "\23\0\2\3\1\0\3\3\1\336\23\3\1\0\3\3"+
    "\23\0\2\3\1\0\21\3\1\337\5\3\1\0\3\3"+
    "\23\0\2\3\1\0\22\3\1\340\4\3\1\0\3\3"+
    "\23\0\2\3\1\0\5\3\1\341\21\3\1\0\3\3"+
    "\23\0\2\3\1\0\4\3\1\342\22\3\1\0\3\3"+
    "\23\0\2\3\1\0\23\3\1\343\3\3\1\0\3\3"+
    "\23\0\2\3\1\0\17\3\1\344\7\3\1\0\1\3"+
    "\1\345\1\3\23\0\2\3\1\0\1\3\1\346\25\3"+
    "\1\0\3\3\23\0\2\3\1\0\20\3\1\347\6\3"+
    "\1\0\3\3\23\0\2\3\1\0\5\3\1\350\21\3"+
    "\1\0\3\3\23\0\2\3\1\0\22\3\1\351\4\3"+
    "\1\0\3\3\23\0\2\3\1\0\1\3\1\352\25\3"+
    "\1\0\3\3\23\0\2\3\1\0\14\3\1\353\6\3"+
    "\1\354\3\3\1\0\3\3\23\0\2\3\1\0\21\3"+
    "\1\355\5\3\1\0\3\3\23\0\2\3\1\0\17\3"+
    "\1\356\7\3\1\0\3\3\23\0\2\3\1\0\1\3"+
    "\1\357\25\3\1\0\3\3\23\0\2\3\1\0\4\3"+
    "\1\360\22\3\1\0\3\3\23\0\2\3\1\0\3\3"+
    "\1\361\23\3\1\0\3\3\23\0\2\3\1\0\24\3"+
    "\1\362\2\3\1\0\3\3\23\0\2\3\1\0\3\3"+
    "\1\363\23\3\1\0\3\3\23\0\2\3\1\0\10\3"+
    "\1\364\16\3\1\0\3\3\23\0\2\3\1\0\5\3"+
    "\1\365\21\3\1\0\3\3\23\0\2\3\1\0\22\3"+
    "\1\366\4\3\1\0\3\3\23\0\2\3\1\0\21\3"+
    "\1\367\5\3\1\0\3\3\24\0\1\260\37\0\1\370"+
    "\17\0\2\3\1\0\4\3\1\371\22\3\1\0\3\3"+
    "\23\0\2\3\1\0\21\3\1\372\5\3\1\0\3\3"+
    "\23\0\2\3\1\0\23\3\1\373\3\3\1\0\3\3"+
    "\23\0\2\3\1\0\27\3\1\0\2\3\1\374\23\0"+
    "\2\3\1\0\4\3\1\375\22\3\1\0\3\3\23\0"+
    "\2\3\1\0\14\3\1\376\12\3\1\0\3\3\23\0"+
    "\2\3\1\0\14\3\1\377\12\3\1\0\3\3\23\0"+
    "\2\3\1\0\27\3\1\u0100\3\3\23\0\2\3\1\0"+
    "\1\u0101\26\3\1\0\3\3\23\0\2\3\1\0\4\3"+
    "\1\u0102\22\3\1\0\3\3\23\0\2\3\1\0\26\3"+
    "\1\u0103\1\0\3\3\23\0\2\3\1\0\21\3\1\u0104"+
    "\5\3\1\0\3\3\23\0\2\3\1\0\2\3\1\u0105"+
    "\24\3\1\0\3\3\23\0\2\3\1\0\1\u0106\26\3"+
    "\1\0\3\3\23\0\2\3\1\0\1\u0107\26\3\1\0"+
    "\3\3\23\0\2\3\1\0\23\3\1\u0108\3\3\1\0"+
    "\3\3\23\0\2\3\1\0\20\3\1\u0109\6\3\1\0"+
    "\3\3\23\0\2\3\1\0\1\3\1\u010a\25\3\1\0"+
    "\3\3\23\0\2\3\1\0\22\3\1\u010b\4\3\1\0"+
    "\3\3\23\0\2\3\1\0\10\3\1\u010c\16\3\1\0"+
    "\3\3\23\0\2\3\1\0\3\3\1\u010d\23\3\1\0"+
    "\3\3\23\0\2\3\1\0\4\3\1\u010e\22\3\1\0"+
    "\3\3\23\0\2\3\1\0\24\3\1\u010f\2\3\1\0"+
    "\3\3\23\0\2\3\1\0\23\3\1\u0110\3\3\1\0"+
    "\3\3\23\0\2\3\1\0\25\3\1\u0111\1\3\1\0"+
    "\3\3\23\0\2\3\1\0\23\3\1\u0112\3\3\1\0"+
    "\3\3\23\0\2\3\1\0\4\3\1\u0113\22\3\1\0"+
    "\3\3\23\0\2\3\1\0\4\3\1\u0114\22\3\1\0"+
    "\3\3\42\0\1\u0115\41\0\2\3\1\0\1\u0116\26\3"+
    "\1\0\3\3\23\0\2\3\1\0\26\3\1\u0117\1\0"+
    "\3\3\23\0\2\3\1\0\1\u0118\26\3\1\0\3\3"+
    "\23\0\2\3\1\0\10\3\1\u0119\16\3\1\0\3\3"+
    "\23\0\2\3\1\0\27\3\1\u011a\3\3\23\0\2\3"+
    "\1\0\1\u011b\26\3\1\0\3\3\23\0\2\3\1\0"+
    "\4\3\1\u011c\22\3\1\0\3\3\23\0\2\3\1\0"+
    "\23\3\1\u011d\3\3\1\0\3\3\23\0\2\3\1\0"+
    "\14\3\1\u011e\12\3\1\0\3\3\23\0\2\3\1\0"+
    "\20\3\1\u011f\6\3\1\0\3\3\23\0\2\3\1\0"+
    "\1\u0120\26\3\1\0\3\3\23\0\2\3\1\0\22\3"+
    "\1\u0121\4\3\1\0\3\3\23\0\2\3\1\0\1\u0122"+
    "\26\3\1\0\3\3\23\0\2\3\1\0\10\3\1\u0123"+
    "\16\3\1\0\3\3\23\0\2\3\1\0\1\u0124\26\3"+
    "\1\0\3\3\23\0\2\3\1\0\15\3\1\u0125\11\3"+
    "\1\0\3\3\23\0\2\3\1\0\12\3\1\u0126\14\3"+
    "\1\0\3\3\23\0\2\3\1\0\12\3\1\u0127\14\3"+
    "\1\0\3\3\23\0\2\3\1\0\22\3\1\u0128\4\3"+
    "\1\0\3\3\23\0\2\3\1\0\23\3\1\u0129\3\3"+
    "\1\0\3\3\23\0\2\3\1\0\1\3\1\u012a\25\3"+
    "\1\0\3\3\23\0\2\3\1\0\1\u012b\26\3\1\0"+
    "\3\3\23\0\2\3\1\0\2\3\1\u012c\24\3\1\0"+
    "\3\3\23\0\2\3\1\0\14\3\1\u012d\12\3\1\0"+
    "\3\3\23\0\2\3\1\0\11\3\1\u012e\15\3\1\0"+
    "\3\3\23\0\2\3\1\0\1\3\1\u012f\25\3\1\0"+
    "\3\3\23\0\2\3\1\0\4\3\1\u0130\22\3\1\0"+
    "\3\3\23\0\2\3\1\0\5\3\1\u0131\21\3\1\0"+
    "\3\3\23\0\2\3\1\0\1\3\1\u0132\25\3\1\0"+
    "\3\3\23\0\2\3\1\0\10\3\1\u0133\16\3\1\0"+
    "\3\3\23\0\2\3\1\0\4\3\1\u0134\22\3\1\0"+
    "\3\3\23\0\2\3\1\0\1\u0135\26\3\1\0\3\3"+
    "\56\0\1\u0136\25\0\2\3\1\0\6\3\1\u0137\20\3"+
    "\1\0\3\3\23\0\2\3\1\0\17\3\1\u0138\7\3"+
    "\1\0\3\3\23\0\2\3\1\0\1\u0139\26\3\1\0"+
    "\3\3\23\0\2\3\1\0\1\3\1\u013a\25\3\1\0"+
    "\3\3\23\0\2\3\1\0\10\3\1\u013b\16\3\1\0"+
    "\3\3\23\0\2\3\1\0\4\3\1\u013c\22\3\1\0"+
    "\3\3\23\0\2\3\1\0\10\3\1\u013d\16\3\1\0"+
    "\3\3\23\0\2\3\1\0\3\3\1\u013e\23\3\1\0"+
    "\3\3\23\0\2\3\1\0\23\3\1\u013f\3\3\1\0"+
    "\3\3\23\0\2\3\1\0\1\3\1\u0140\25\3\1\0"+
    "\3\3\23\0\2\3\1\0\14\3\1\u0141\12\3\1\0"+
    "\3\3\23\0\2\3\1\0\4\3\1\u0142\22\3\1\0"+
    "\3\3\23\0\2\3\1\0\5\3\1\u0143\21\3\1\0"+
    "\3\3\23\0\2\3\1\0\1\3\1\u0144\25\3\1\0"+
    "\3\3\23\0\2\3\1\0\1\u0145\26\3\1\0\3\3"+
    "\23\0\2\3\1\0\27\3\1\u0146\3\3\46\0\1\u0147"+
    "\35\0\2\3\1\0\27\3\1\u0148\3\3\23\0\2\3"+
    "\1\0\15\3\1\u0149\11\3\1\0\3\3\45\0\1\u014a"+
    "\36\0\2\3\1\0\10\3\1\u014b\16\3\1\0\3\3"+
    "\23\0\2\3\1\0\1\u014c\26\3\1\0\3\3\23\0"+
    "\2\3\1\0\27\3\1\u014d\3\3\23\0\2\3\1\0"+
    "\4\3\1\u014e\22\3\1\0\3\3\23\0\2\3\1\0"+
    "\4\3\1\u014f\22\3\1\0\3\3\23\0\2\3\1\0"+
    "\14\3\1\u0150\12\3\1\0\3\3\23\0\2\3\1\0"+
    "\23\3\1\u0151\3\3\1\0\3\3\23\0\2\3\1\0"+
    "\1\u0152\26\3\1\0\3\3\23\0\2\3\1\0\4\3"+
    "\1\u0153\22\3\1\0\3\3\23\0\2\3\1\0\4\3"+
    "\1\u0154\22\3\1\0\3\3\23\0\2\3\1\0\4\3"+
    "\1\u0155\22\3\1\0\3\3\23\0\2\3\1\0\4\3"+
    "\1\u0156\22\3\1\0\3\3\23\0\2\3\1\0\4\3"+
    "\1\u0157\22\3\1\0\3\3\23\0\2\3\1\0\21\3"+
    "\1\u0158\5\3\1\0\3\3\23\0\2\3\1\0\27\3"+
    "\1\u0159\3\3\23\0\2\3\1\0\1\3\1\u015a\25\3"+
    "\1\0\3\3\23\0\2\3\1\0\15\3\1\u015b\11\3"+
    "\1\0\3\3\23\0\2\3\1\0\17\3\1\u015c\7\3"+
    "\1\0\3\3\23\0\2\3\1\0\23\3\1\u015d\3\3"+
    "\1\0\3\3\23\0\2\3\1\0\6\3\1\u015e\20\3"+
    "\1\0\3\3\23\0\2\3\1\0\1\u015f\26\3\1\0"+
    "\3\3\23\0\2\3\1\0\14\3\1\u0160\12\3\1\0"+
    "\3\3\23\0\2\3\1\0\14\3\1\u0161\12\3\1\0"+
    "\3\3\45\0\1\u0162\36\0\2\3\1\0\10\3\1\u0163"+
    "\16\3\1\0\3\3\23\0\2\3\1\0\5\3\1\u0164"+
    "\21\3\1\0\3\3\23\0\2\3\1\0\22\3\1\u0165"+
    "\4\3\1\0\3\3\23\0\2\3\1\0\2\3\1\u0166"+
    "\24\3\1\0\3\3\23\0\2\3\1\0\1\u0167\26\3"+
    "\1\0\3\3\23\0\2\3\1\0\4\3\1\u0168\22\3"+
    "\1\0\3\3\23\0\2\3\1\0\3\3\1\u0169\23\3"+
    "\1\0\3\3\23\0\2\3\1\0\21\3\1\u016a\5\3"+
    "\1\0\3\3\23\0\2\3\1\0\23\3\1\u016b\3\3"+
    "\1\0\3\3\56\0\1\u016c\33\0\1\u016d\57\0\1\u016e"+
    "\53\0\2\3\1\0\14\3\1\u016f\12\3\1\0\3\3"+
    "\46\0\1\u0170\35\0\2\3\1\0\17\3\1\u0171\7\3"+
    "\1\0\3\3\30\0\1\u0172\53\0\2\3\1\0\1\3"+
    "\1\u0173\25\3\1\0\3\3\23\0\2\3\1\0\14\3"+
    "\1\u0174\12\3\1\0\3\3\23\0\2\3\1\0\4\3"+
    "\1\u0175\22\3\1\0\3\3\56\0\1\u0176\25\0\2\3"+
    "\1\0\21\3\1\u0177\5\3\1\0\3\3\23\0\2\3"+
    "\1\0\23\3\1\u0178\3\3\1\0\3\3\23\0\2\3"+
    "\1\0\13\3\1\u0179\13\3\1\0\3\3\23\0\2\3"+
    "\1\0\20\3\1\u017a\6\3\1\0\3\3\23\0\2\3"+
    "\1\0\4\3\1\u017b\22\3\1\0\3\3\23\0\2\3"+
    "\1\0\21\3\1\u017c\5\3\1\0\3\3\36\0\1\u017d"+
    "\45\0\2\3\1\0\14\3\1\u017e\12\3\1\0\3\3"+
    "\23\0\2\3\1\0\4\3\1\u017f\22\3\1\0\3\3"+
    "\23\0\2\3\1\0\4\3\1\u0180\22\3\1\0\3\3"+
    "\23\0\2\3\1\0\4\3\1\u0181\22\3\1\0\3\3"+
    "\23\0\2\3\1\0\1\u0182\26\3\1\0\3\3\45\0"+
    "\1\u0183\44\0\1\u0184\70\0\1\u0185\45\0\1\u0186\55\0"+
    "\2\3\1\0\14\3\1\u0187\12\3\1\0\3\3\41\0"+
    "\1\u0188\42\0\2\3\1\0\10\3\1\u0189\16\3\1\0"+
    "\3\3\23\0\2\3\1\0\21\3\1\u018a\5\3\1\0"+
    "\3\3\45\0\1\u018b\36\0\2\3\1\0\12\3\1\u018c"+
    "\14\3\1\0\3\3\23\0\2\3\1\0\6\3\1\u018d"+
    "\20\3\1\0\3\3\23\0\2\3\1\0\23\3\1\u018e"+
    "\3\3\1\0\3\3\23\0\2\3\1\0\23\3\1\u018f"+
    "\3\3\1\0\3\3\42\0\1\u0190\41\0\2\3\1\0"+
    "\1\u0191\26\3\1\0\3\3\23\0\2\3\1\0\5\3"+
    "\1\u0192\21\3\1\0\3\3\36\0\1\u0193\54\0\1\u0194"+
    "\51\0\2\3\1\0\14\3\1\u0195\12\3\1\0\3\3"+
    "\23\0\2\3\1\0\4\3\1\u0196\22\3\1\0\3\3"+
    "\36\0\1\u0197\45\0\2\3\1\0\4\3\1\u0198\22\3"+
    "\1\0\3\3\23\0\2\3\1\0\4\3\1\u0199\22\3"+
    "\1\0\3\3\42\0\1\u019a\67\0\1\u019b\32\0\2\3"+
    "\1\0\1\u019c\26\3\1\0\3\3\23\0\2\3\1\0"+
    "\5\3\1\u019d\21\3\1\0\3\3\42\0\1\u019e\41\0"+
    "\2\3\1\0\22\3\1\u019f\4\3\1\0\3\3\55\0"+
    "\1\u01a0\26\0\2\3\1\0\4\3\1\u01a1\22\3\1\0"+
    "\3\3\56\0\1\u01a2\25\0\2\3\1\0\14\3\1\u01a3"+
    "\12\3\1\0\3\3\45\0\1\u01a4\36\0\2\3\1\0"+
    "\1\u01a5\26\3\1\0\3\3\36\0\1\u01a6\64\0\1\u01a7"+
    "\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16023];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\1\11\2\1\4\11\3\1\6\11"+
    "\1\1\1\0\66\1\1\0\3\11\1\0\111\1\1\0"+
    "\1\11\46\1\1\0\37\1\1\11\7\1\1\0\24\1"+
    "\1\0\4\1\1\0\33\1\1\0\17\1\3\0\1\1"+
    "\1\0\2\1\1\0\13\1\1\0\10\1\1\0\11\1"+
    "\3\0\1\1\1\0\1\1\1\0\3\1\1\0\6\1"+
    "\1\0\5\1\1\0\2\11\1\0\1\1\1\11\2\1"+
    "\1\0\4\1\1\11\2\1\2\0\2\1\1\0\2\1"+
    "\1\11\1\0\2\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return new Symbol(sym.PUNTOYC, yychar, yyline, yytext());
          }
        case 114: break;
        case 106: 
          { return new Symbol(sym.PR_DATABASES, yychar, yyline, yytext());
          }
        case 115: break;
        case 40: 
          { return new Symbol(sym.PR_TEXT, yychar, yyline, yytext());
          }
        case 116: break;
        case 99: 
          { return new Symbol(sym.PR_GROUP_BY, yychar, yyline, yytext());
          }
        case 117: break;
        case 49: 
          { return new Symbol(sym.PR_DROP, yychar, yyline, yytext());
          }
        case 118: break;
        case 85: 
          { return new Symbol(sym.BETWEEN, yychar, yyline, yytext());
          }
        case 119: break;
        case 93: 
          { return new Symbol(sym.PR_TRUNCATE, yychar, yyline, yytext());
          }
        case 120: break;
        case 19: 
          { return new Symbol(sym.PUNTO, yychar, yyline, yytext());
          }
        case 121: break;
        case 9: 
          { return new Symbol(sym.LLAVE_A, yychar, yyline, yytext());
          }
        case 122: break;
        case 104: 
          { return new Symbol(sym.PR_L_JOIN, yychar, yyline, yytext());
          }
        case 123: break;
        case 42: 
          { return new Symbol(sym.LIKE, yychar, yyline, yytext());
          }
        case 124: break;
        case 13: 
          { return new Symbol(sym.MAYORQ, yychar, yyline, yytext());
          }
        case 125: break;
        case 7: 
          { return new Symbol(sym.P_OPEN, yychar, yyline, yytext());
          }
        case 126: break;
        case 81: 
          { return new Symbol(sym.PR_CHANGE, yychar, yyline, yytext());
          }
        case 127: break;
        case 69: 
          { return new Symbol(sym.PR_STORED, yychar, yyline, yytext());
          }
        case 128: break;
        case 77: 
          { return new Symbol(sym.PR_UPDATE, yychar, yyline, yytext());
          }
        case 129: break;
        case 96: 
          { return new Symbol(sym.PR_DESCRIBE, yychar, yyline, yytext());
          }
        case 130: break;
        case 100: 
          { return new Symbol(sym.PR_FUNCTION, yychar, yyline, yytext());
          }
        case 131: break;
        case 2: 
          { return new Symbol(sym.IDENTIFICADOR, yychar, yyline, yytext());
          }
        case 132: break;
        case 56: 
          { return new Symbol(sym.PR_TABLE, yychar, yyline, yytext());
          }
        case 133: break;
        case 50: 
          { return new Symbol(sym.PR_VIEW, yychar, yyline, yytext());
          }
        case 134: break;
        case 24: 
          { return new Symbol(sym.PR_ON, yychar, yyline, yytext());
          }
        case 135: break;
        case 68: 
          { return new Symbol(sym.PR_BIGINT, yychar, yyline, yytext());
          }
        case 136: break;
        case 53: 
          { return new Symbol(sym.PR_FROM, yychar, yyline, yytext());
          }
        case 137: break;
        case 72: 
          { return new Symbol(sym.PR_DOUBLE, yychar, yyline, yytext());
          }
        case 138: break;
        case 6: 
          { return new Symbol(sym.COMA, yychar, yyline, yytext());
          }
        case 139: break;
        case 8: 
          { return new Symbol(sym.P_CLOSE, yychar, yyline, yytext());
          }
        case 140: break;
        case 35: 
          { return new Symbol(sym.PR_INT, yychar, yyline, yytext());
          }
        case 141: break;
        case 87: 
          { return new Symbol(sym.PR_DECLARE, yychar, yyline, yytext());
          }
        case 142: break;
        case 66: 
          { return new Symbol(sym.PR_CHECK, yychar, yyline, yytext());
          }
        case 143: break;
        case 112: 
          { return new Symbol(sym.PR_AUTO_INCREMENT, yychar, yyline, yytext());
          }
        case 144: break;
        case 58: 
          { return new Symbol(sym.PR_BEGIN, yychar, yyline, yytext());
          }
        case 145: break;
        case 30: 
          { return new Symbol(sym.PR_ASC, yychar, yyline, yytext());
          }
        case 146: break;
        case 80: 
          { return new Symbol(sym.PR_CREATE, yychar, yyline, yytext());
          }
        case 147: break;
        case 22: 
          { return new Symbol(sym.IN, yychar, yyline, yytext());
          }
        case 148: break;
        case 52: 
          { return new Symbol(sym.PR_NULL, yychar, yyline, yytext());
          }
        case 149: break;
        case 48: 
          { return new Symbol(sym.PR_DESC, yychar, yyline, yytext());
          }
        case 150: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 151: break;
        case 108: 
          { return new Symbol(sym.PR_I_JOIN, yychar, yyline, yytext());
          }
        case 152: break;
        case 111: 
          { return new Symbol(sym.PR_R_JOIN, yychar, yyline, yytext());
          }
        case 153: break;
        case 97: 
          { return new Symbol(sym.PR_DISTINCT, yychar, yyline, yytext());
          }
        case 154: break;
        case 37: 
          { return new Symbol(sym.NOT, yychar, yyline, yytext());
          }
        case 155: break;
        case 91: 
          { return new Symbol(sym.PR_REPLACE, yychar, yyline, yytext());
          }
        case 156: break;
        case 36: 
          { return new Symbol(sym.PR_KEY, yychar, yyline, yytext());
          }
        case 157: break;
        case 27: 
          { return new Symbol(sym.NOIGUAL, yychar, yyline, yytext());
          }
        case 158: break;
        case 45: 
          { return new Symbol(sym.PR_ENUM, yychar, yyline, yytext());
          }
        case 159: break;
        case 63: 
          { return new Symbol(sym.PR_GRANT, yychar, yyline, yytext());
          }
        case 160: break;
        case 65: 
          { return new Symbol(sym.PR_UNION, yychar, yyline, yytext());
          }
        case 161: break;
        case 44: 
          { return new Symbol(sym.PR_ELSE, yychar, yyline, yytext());
          }
        case 162: break;
        case 73: 
          { return new Symbol(sym.PR_VALUES, yychar, yyline, yytext());
          }
        case 163: break;
        case 59: 
          { return new Symbol(sym.PR_LIMIT, yychar, yyline, yytext());
          }
        case 164: break;
        case 70: 
          { return new Symbol(sym.PR_SELECT, yychar, yyline, yytext());
          }
        case 165: break;
        case 41: 
          { return new Symbol(sym.PR_TIME, yychar, yyline, yytext());
          }
        case 166: break;
        case 75: 
          { return new Symbol(sym.PR_OFFSET, yychar, yyline, yytext());
          }
        case 167: break;
        case 107: 
          { return new Symbol(sym.PR_PROCEDURE, yychar, yyline, yytext());
          }
        case 168: break;
        case 23: 
          { return new Symbol(sym.PR_IF, yychar, yyline, yytext());
          }
        case 169: break;
        case 62: 
          { return new Symbol(sym.PR_WHILE, yychar, yyline, yytext());
          }
        case 170: break;
        case 82: 
          { return new Symbol(sym.PR_REVOKE, yychar, yyline, yytext());
          }
        case 171: break;
        case 31: 
          { return new Symbol(sym.PR_ADD, yychar, yyline, yytext());
          }
        case 172: break;
        case 26: 
          { return new Symbol(sym.MENORIG, yychar, yyline, yytext());
          }
        case 173: break;
        case 29: 
          { return new Symbol(sym.FLOAT, yychar, yyline, yytext());
          }
        case 174: break;
        case 32: 
          { return new Symbol(sym.AND, yychar, yyline, yytext());
          }
        case 175: break;
        case 15: 
          { return new Symbol(sym.S_RESTA, yychar, yyline, yytext());
          }
        case 176: break;
        case 33: 
          { return new Symbol(sym.PR_END, yychar, yyline, yytext());
          }
        case 177: break;
        case 86: 
          { return new Symbol(sym.PR_DEFAULT, yychar, yyline, yytext());
          }
        case 178: break;
        case 76: 
          { return new Symbol(sym.PR_UNIQUE, yychar, yyline, yytext());
          }
        case 179: break;
        case 43: 
          { return new Symbol(sym.PR_LOOP, yychar, yyline, yytext());
          }
        case 180: break;
        case 113: 
          { return new Symbol(sym.PR_FO_JOIN, yychar, yyline, yytext());
          }
        case 181: break;
        case 94: 
          { return new Symbol(sym.PR_DATABASE, yychar, yyline, yytext());
          }
        case 182: break;
        case 71: 
          { return new Symbol(sym.PR_DELETE, yychar, yyline, yytext());
          }
        case 183: break;
        case 17: 
          { return new Symbol(sym.S_MODULO, yychar, yyline, yytext());
          }
        case 184: break;
        case 10: 
          { return new Symbol(sym.LLAVE_C, yychar, yyline, yytext());
          }
        case 185: break;
        case 51: 
          { return new Symbol(sym.PR_INTO, yychar, yyline, yytext());
          }
        case 186: break;
        case 3: 
          { return new Symbol(sym.INT, yychar, yyline, yytext());
          }
        case 187: break;
        case 60: 
          { return new Symbol(sym.PR_INDEX, yychar, yyline, yytext());
          }
        case 188: break;
        case 90: 
          { return new Symbol(sym.PR_FOREIGN, yychar, yyline, yytext());
          }
        case 189: break;
        case 79: 
          { return new Symbol(sym.PR_COMMIT, yychar, yyline, yytext());
          }
        case 190: break;
        case 38: 
          { return new Symbol(sym.PR_FOR, yychar, yyline, yytext());
          }
        case 191: break;
        case 12: 
          { return new Symbol(sym.MENORQ, yychar, yyline, yytext());
          }
        case 192: break;
        case 28: 
          { return new Symbol(sym.MAYORIG, yychar, yyline, yytext());
          }
        case 193: break;
        case 46: 
          { return new Symbol(sym.PR_SHOW, yychar, yyline, yytext());
          }
        case 194: break;
        case 18: 
          { return new Symbol(sym.S_MULT, yychar, yyline, yytext());
          }
        case 195: break;
        case 105: 
          { return new Symbol(sym.PR_SAVEPOINT, yychar, yyline, yytext());
          }
        case 196: break;
        case 47: 
          { return new Symbol(sym.PR_DATE, yychar, yyline, yytext());
          }
        case 197: break;
        case 61: 
          { return new Symbol(sym.PR_WHERE, yychar, yyline, yytext());
          }
        case 198: break;
        case 103: 
          { return new Symbol(sym.PR_PASSWORD, yychar, yyline, yytext());
          }
        case 199: break;
        case 101: 
          { return new Symbol(sym.PR_ORDER_BY, yychar, yyline, yytext());
          }
        case 200: break;
        case 20: 
          { return new Symbol(sym.PR_TO, yychar, yyline, yytext());
          }
        case 201: break;
        case 16: 
          { return new Symbol(sym.S_DIV, yychar, yyline, yytext());
          }
        case 202: break;
        case 54: 
          { return new Symbol(sym.PR_USER, yychar, yyline, yytext());
          }
        case 203: break;
        case 34: 
          { return new Symbol(sym.PR_SET, yychar, yyline, yytext());
          }
        case 204: break;
        case 110: 
          { return new Symbol(sym.PR_REFERENCES, yychar, yyline, yytext());
          }
        case 205: break;
        case 98: 
          { return new Symbol(sym.PR_NOT_NULL, yychar, yyline, yytext());
          }
        case 206: break;
        case 4: 
          { /**/
          }
        case 207: break;
        case 83: 
          { return new Symbol(sym.PR_RENAME, yychar, yyline, yytext());
          }
        case 208: break;
        case 57: 
          { return new Symbol(sym.PR_ALTER, yychar, yyline, yytext());
          }
        case 209: break;
        case 89: 
          { return new Symbol(sym.PR_VARCHAR, yychar, yyline, yytext());
          }
        case 210: break;
        case 14: 
          { return new Symbol(sym.S_SUMA, yychar, yyline, yytext());
          }
        case 211: break;
        case 64: 
          { return new Symbol(sym.PR_FLOAT, yychar, yyline, yytext());
          }
        case 212: break;
        case 25: 
          { return new Symbol(sym.OR, yychar, yyline, yytext());
          }
        case 213: break;
        case 88: 
          { return new Symbol(sym.PR_DECIMAL, yychar, yyline, yytext());
          }
        case 214: break;
        case 74: 
          { return new Symbol(sym.PR_INSERT, yychar, yyline, yytext());
          }
        case 215: break;
        case 11: 
          { return new Symbol(sym.IGUAL, yychar, yyline, yytext());
          }
        case 216: break;
        case 21: 
          { return new Symbol(sym.PR_AS, yychar, yyline, yytext());
          }
        case 217: break;
        case 102: 
          { return new Symbol(sym.PR_ROLLBACK, yychar, yyline, yytext());
          }
        case 218: break;
        case 92: 
          { return new Symbol(sym.PR_PRIMARY, yychar, yyline, yytext());
          }
        case 219: break;
        case 55: 
          { return new Symbol(sym.PR_CHAR, yychar, yyline, yytext());
          }
        case 220: break;
        case 78: 
          { return new Symbol(sym.PR_COLUMN, yychar, yyline, yytext());
          }
        case 221: break;
        case 39: 
          { return new Symbol(sym.CADENA_CARACT, yychar, yyline, yytext());
          }
        case 222: break;
        case 84: 
          { return new Symbol(sym.PR_HAVING, yychar, yyline, yytext());
          }
        case 223: break;
        case 109: 
          { return new Symbol(sym.PR_CONSTRAINT, yychar, yyline, yytext());
          }
        case 224: break;
        case 67: 
          { return new Symbol(sym.PR_TABLES, yychar, yyline, yytext());
          }
        case 225: break;
        case 95: 
          { return new Symbol(sym.PR_DATETIME, yychar, yyline, yytext());
          }
        case 226: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
