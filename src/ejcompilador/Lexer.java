/* The following code was generated by JFlex 1.4.3 on 16/04/23 22:41 */


package ejcompilador;
import static ejcompilador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/04/23 22:41 from the specification file
 * <tt>C:/Users/Criss/ARCHIVOS SSD/EJCompilador/src/ejcompilador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\2\0\1\3\22\0\1\34\1\51\3\0\1\55"+
    "\1\0\1\60\1\42\1\43\1\56\1\52\1\41\1\53\1\57\1\54"+
    "\12\2\1\0\1\40\1\47\1\46\1\50\2\0\1\6\1\7\1\21"+
    "\1\13\1\11\1\27\1\26\1\31\1\15\1\35\1\17\1\10\1\24"+
    "\1\25\1\22\1\33\1\36\1\30\1\12\1\5\1\23\1\14\1\16"+
    "\1\32\1\20\1\1\1\44\1\0\1\45\1\0\1\37\1\0\32\1"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\24\2\1\4"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\1\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\1\1\0\3\2\1\25\2\2\1\26\25\2\1\27"+
    "\1\30\5\2\1\31\1\2\1\32\20\2\1\7\1\0"+
    "\1\33\1\34\1\35\1\0\1\36\5\2\1\37\1\40"+
    "\1\2\1\41\10\2\1\42\3\2\1\43\15\2\1\44"+
    "\5\2\1\45\13\2\1\46\4\2\1\47\15\2\1\0"+
    "\1\50\1\2\1\51\1\52\7\2\1\53\1\2\1\54"+
    "\1\55\1\56\3\2\1\57\1\2\1\60\1\2\1\61"+
    "\5\2\1\62\2\2\1\63\1\64\12\2\1\65\3\2"+
    "\1\66\3\2\1\0\1\67\6\2\1\70\12\2\1\3"+
    "\1\71\1\2\1\72\2\2\1\73\1\2\1\0\1\74"+
    "\17\2\1\75\1\2\1\76\1\77\5\2\1\100\2\2"+
    "\1\101\2\2\1\0\1\102\1\2\1\103\1\2\1\0"+
    "\13\2\1\104\3\2\1\105\1\0\1\106\1\2\1\107"+
    "\2\2\1\110\5\2\1\111\1\112\1\2\1\113\1\0"+
    "\1\114\1\115\1\2\1\116\1\117\1\120\1\0\1\121"+
    "\1\122\2\0\1\2\1\0\1\2\1\123\1\124\2\2"+
    "\1\0\1\2\1\125\5\2\1\126\1\0\4\2\1\127"+
    "\1\130\1\131\1\2\1\132\1\0\1\2\3\0\1\133"+
    "\1\0\2\2\1\134\1\0\2\2\1\135\1\2\1\136"+
    "\1\2\1\0\1\2\1\137\1\140\1\141\1\142\1\0"+
    "\1\2\1\143\1\144\1\145\1\0\1\146\1\2\1\0"+
    "\1\147\1\150\2\2\1\151\1\152\1\153\1\0\1\2"+
    "\1\0\1\2\1\0\1\154\1\2\1\155\1\156\1\0"+
    "\1\157\1\160\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\161\1\0\1\162";

  private static int [] zzUnpackAction() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\61\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\61\0\u04fa\0\u052b\0\61\0\61"+
    "\0\61\0\61\0\u055c\0\u058d\0\u05be\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3"+
    "\0\142\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\142\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71"+
    "\0\142\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8"+
    "\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50"+
    "\0\u0f81\0\u0fb2\0\u0fe3\0\304\0\u1014\0\61\0\61\0\61"+
    "\0\u1045\0\u0620\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\142"+
    "\0\142\0\u116b\0\142\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260"+
    "\0\u1291\0\u12c2\0\u12f3\0\142\0\u1324\0\u1355\0\u1386\0\142"+
    "\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e"+
    "\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696"+
    "\0\u16c7\0\u16f8\0\u1729\0\142\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975"+
    "\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd"+
    "\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85"+
    "\0\u1cb6\0\u1ce7\0\u1d18\0\61\0\u1d49\0\142\0\142\0\u1d7a"+
    "\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\142\0\u1ed1"+
    "\0\142\0\142\0\142\0\u1f02\0\u1f33\0\u1f64\0\142\0\u1f95"+
    "\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d"+
    "\0\142\0\u214e\0\u217f\0\142\0\142\0\u21b0\0\u21e1\0\u2212"+
    "\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\142"+
    "\0\u239a\0\u23cb\0\u23fc\0\142\0\u242d\0\u245e\0\u248f\0\u24c0"+
    "\0\142\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6\0\142"+
    "\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e"+
    "\0\u279f\0\u27d0\0\61\0\u2801\0\u2832\0\142\0\u2863\0\u2894"+
    "\0\142\0\u28c5\0\u28f6\0\142\0\u2927\0\u2958\0\u2989\0\u29ba"+
    "\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42"+
    "\0\u2b73\0\u2ba4\0\u2bd5\0\142\0\u2c06\0\142\0\142\0\u2c37"+
    "\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\142\0\u2d2c\0\u2d5d\0\142"+
    "\0\u2d8e\0\u2dbf\0\u2df0\0\142\0\u2e21\0\142\0\u2e52\0\u2e83"+
    "\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b"+
    "\0\u303c\0\u306d\0\u309e\0\142\0\u30cf\0\u3100\0\u3131\0\142"+
    "\0\u3162\0\142\0\u3193\0\142\0\u31c4\0\u31f5\0\142\0\u3226"+
    "\0\u3257\0\u3288\0\u32b9\0\u32ea\0\142\0\142\0\u331b\0\142"+
    "\0\u334c\0\142\0\142\0\u337d\0\142\0\142\0\142\0\u33ae"+
    "\0\142\0\142\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3\0\142"+
    "\0\142\0\u34d4\0\u3505\0\u3536\0\u3567\0\142\0\u3598\0\u35c9"+
    "\0\u35fa\0\u362b\0\u365c\0\142\0\u368d\0\u36be\0\u36ef\0\u3720"+
    "\0\u3751\0\142\0\142\0\142\0\u3782\0\142\0\u37b3\0\u37e4"+
    "\0\u3815\0\u3846\0\u3877\0\142\0\u38a8\0\u38d9\0\u390a\0\142"+
    "\0\u393b\0\u396c\0\u399d\0\142\0\u39ce\0\142\0\u39ff\0\u3a30"+
    "\0\u3a61\0\u3a92\0\142\0\142\0\142\0\u3ac3\0\u3af4\0\61"+
    "\0\61\0\61\0\u3b25\0\142\0\u3b56\0\u3b87\0\142\0\142"+
    "\0\u3bb8\0\u3be9\0\61\0\142\0\142\0\u3c1a\0\u3c4b\0\u3c7c"+
    "\0\u3cad\0\u3cde\0\142\0\u3d0f\0\61\0\142\0\u3d40\0\142"+
    "\0\61\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u3e35\0\u3e66\0\142"+
    "\0\u3e97\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\3\1\22\1\23\1\24\1\3\1\25\1\26\1\27"+
    "\1\30\1\31\1\3\1\32\1\33\3\3\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\62\0"+
    "\2\3\2\0\27\3\1\0\3\3\23\0\1\4\54\0"+
    "\1\55\4\0\1\5\30\0\1\5\4\0\1\5\20\0"+
    "\2\3\2\0\1\3\1\56\2\3\1\57\3\3\1\60"+
    "\4\3\1\61\5\3\1\62\3\3\1\0\3\3\22\0"+
    "\2\3\2\0\3\3\1\63\1\3\1\64\1\65\7\3"+
    "\1\66\1\3\1\67\6\3\1\0\3\3\22\0\2\3"+
    "\2\0\4\3\1\70\3\3\1\71\16\3\1\0\3\3"+
    "\22\0\2\3\2\0\4\3\1\72\3\3\1\73\4\3"+
    "\1\74\11\3\1\0\3\3\22\0\2\3\2\0\3\3"+
    "\1\75\14\3\1\76\6\3\1\0\3\3\22\0\2\3"+
    "\2\0\1\77\1\100\2\3\1\101\17\3\1\102\2\3"+
    "\1\0\3\3\22\0\2\3\2\0\1\3\1\103\2\3"+
    "\1\104\3\3\1\105\4\3\1\106\5\3\1\107\3\3"+
    "\1\0\3\3\22\0\2\3\2\0\1\3\1\110\6\3"+
    "\1\111\16\3\1\0\3\3\22\0\2\3\2\0\20\3"+
    "\1\112\1\3\1\113\4\3\1\0\3\3\22\0\2\3"+
    "\2\0\24\3\1\114\2\3\1\0\3\3\22\0\2\3"+
    "\2\0\4\3\1\115\22\3\1\0\3\3\22\0\2\3"+
    "\2\0\15\3\1\116\5\3\1\117\1\120\2\3\1\0"+
    "\3\3\22\0\2\3\2\0\20\3\1\121\1\3\1\122"+
    "\1\123\3\3\1\0\3\3\22\0\2\3\2\0\5\3"+
    "\1\124\12\3\1\125\5\3\1\126\1\0\3\3\22\0"+
    "\2\3\2\0\15\3\1\127\1\130\10\3\1\0\3\3"+
    "\22\0\2\3\2\0\23\3\1\131\3\3\1\0\3\3"+
    "\22\0\2\3\2\0\3\3\1\132\11\3\1\133\1\134"+
    "\4\3\1\135\3\3\1\0\3\3\22\0\2\3\2\0"+
    "\4\3\1\136\3\3\1\137\4\3\1\140\11\3\1\0"+
    "\3\3\22\0\2\3\2\0\1\3\1\141\25\3\1\0"+
    "\3\3\22\0\2\3\2\0\1\3\1\142\21\3\1\143"+
    "\3\3\1\0\3\3\24\0\1\5\30\0\1\5\4\0"+
    "\1\144\22\0\1\5\30\0\1\144\4\0\1\5\72\0"+
    "\1\145\53\0\1\146\1\0\1\147\56\0\1\150\60\0"+
    "\1\147\12\0\4\151\1\0\54\151\2\0\1\152\57\0"+
    "\2\3\2\0\2\3\1\153\24\3\1\0\3\3\22\0"+
    "\2\3\2\0\25\3\1\154\1\3\1\0\3\3\22\0"+
    "\2\3\2\0\17\3\1\155\7\3\1\0\3\3\22\0"+
    "\2\3\2\0\16\3\1\156\10\3\1\0\3\3\22\0"+
    "\2\3\2\0\1\157\26\3\1\0\3\3\22\0\2\3"+
    "\2\0\14\3\1\160\12\3\1\0\3\3\22\0\2\3"+
    "\2\0\6\3\1\161\20\3\1\0\3\3\22\0\2\3"+
    "\2\0\1\162\26\3\1\0\3\3\22\0\2\3\2\0"+
    "\6\3\1\163\20\3\1\0\3\3\22\0\2\3\2\0"+
    "\1\164\20\3\1\165\5\3\1\0\3\3\22\0\2\3"+
    "\2\0\21\3\1\166\5\3\1\0\3\3\22\0\2\3"+
    "\2\0\22\3\1\167\4\3\1\0\3\3\22\0\2\3"+
    "\2\0\12\3\1\170\4\3\1\171\7\3\1\0\3\3"+
    "\22\0\2\3\2\0\15\3\1\172\11\3\1\0\3\3"+
    "\22\0\2\3\2\0\5\3\1\173\21\3\1\0\3\3"+
    "\22\0\2\3\2\0\6\3\1\174\7\3\1\175\10\3"+
    "\1\0\3\3\22\0\2\3\2\0\15\3\1\176\11\3"+
    "\1\0\3\3\22\0\2\3\2\0\7\3\1\177\17\3"+
    "\1\0\3\3\22\0\2\3\2\0\1\200\2\3\1\201"+
    "\23\3\1\0\3\3\22\0\2\3\2\0\15\3\1\202"+
    "\11\3\1\0\3\3\22\0\2\3\2\0\1\203\26\3"+
    "\1\0\3\3\22\0\2\3\2\0\3\3\1\204\1\3"+
    "\1\205\6\3\1\206\5\3\1\207\4\3\1\0\3\3"+
    "\22\0\2\3\2\0\5\3\1\210\21\3\1\0\3\3"+
    "\22\0\2\3\2\0\16\3\1\211\10\3\1\0\3\3"+
    "\22\0\2\3\2\0\15\3\1\212\11\3\1\0\3\3"+
    "\22\0\2\3\2\0\3\3\1\213\17\3\1\214\3\3"+
    "\1\0\3\3\22\0\2\3\2\0\4\3\1\215\22\3"+
    "\1\0\3\3\22\0\2\3\2\0\1\216\4\3\1\217"+
    "\1\220\11\3\1\221\6\3\1\0\3\3\22\0\2\3"+
    "\2\0\4\3\1\222\3\3\1\223\16\3\1\0\3\3"+
    "\22\0\2\3\2\0\13\3\1\224\13\3\1\0\3\3"+
    "\22\0\2\3\2\0\3\3\1\225\13\3\1\226\1\227"+
    "\6\3\1\0\3\3\22\0\2\3\2\0\4\3\1\230"+
    "\22\3\1\0\3\3\22\0\2\3\2\0\1\3\1\231"+
    "\2\3\1\232\22\3\1\0\3\3\22\0\2\3\2\0"+
    "\22\3\1\233\4\3\1\0\3\3\22\0\2\3\2\0"+
    "\6\3\1\234\20\3\1\0\3\3\22\0\2\3\2\0"+
    "\4\3\1\235\22\3\1\0\3\3\22\0\2\3\2\0"+
    "\10\3\1\236\16\3\1\0\3\3\22\0\2\3\2\0"+
    "\6\3\1\237\20\3\1\0\3\3\22\0\2\3\2\0"+
    "\1\240\26\3\1\0\3\3\22\0\2\3\2\0\3\3"+
    "\1\241\23\3\1\0\3\3\22\0\2\3\2\0\1\3"+
    "\1\242\13\3\1\243\11\3\1\0\3\3\22\0\2\3"+
    "\2\0\15\3\1\244\11\3\1\0\3\3\22\0\2\3"+
    "\2\0\23\3\1\245\3\3\1\0\3\3\22\0\2\3"+
    "\2\0\3\3\1\246\14\3\1\247\6\3\1\0\3\3"+
    "\22\0\2\3\2\0\15\3\1\250\11\3\1\0\3\3"+
    "\22\0\2\3\2\0\7\3\1\251\10\3\1\252\1\3"+
    "\1\253\3\3\1\254\1\0\3\3\22\0\2\3\2\0"+
    "\14\3\1\255\12\3\1\0\3\3\22\0\2\3\2\0"+
    "\3\3\1\256\23\3\1\0\3\3\22\0\2\3\2\0"+
    "\7\3\1\257\17\3\1\0\3\3\22\0\2\3\2\0"+
    "\5\3\1\260\21\3\1\0\3\3\22\0\2\3\2\0"+
    "\10\3\1\261\4\3\1\262\11\3\1\0\3\3\23\0"+
    "\1\263\56\0\60\151\1\264\1\0\2\3\2\0\3\3"+
    "\1\265\23\3\1\0\3\3\22\0\2\3\2\0\1\266"+
    "\26\3\1\0\3\3\22\0\2\3\2\0\4\3\1\267"+
    "\22\3\1\0\3\3\22\0\2\3\2\0\20\3\1\270"+
    "\6\3\1\0\3\3\22\0\2\3\2\0\4\3\1\271"+
    "\22\3\1\0\3\3\22\0\2\3\2\0\15\3\1\272"+
    "\11\3\1\0\3\3\22\0\2\3\2\0\11\3\1\273"+
    "\15\3\1\0\3\3\22\0\2\3\2\0\10\3\1\274"+
    "\16\3\1\0\3\3\22\0\2\3\2\0\10\3\1\275"+
    "\16\3\1\0\3\3\22\0\2\3\2\0\1\276\26\3"+
    "\1\0\3\3\22\0\2\3\2\0\4\3\1\277\22\3"+
    "\1\0\3\3\22\0\2\3\2\0\10\3\1\300\16\3"+
    "\1\0\3\3\22\0\2\3\2\0\26\3\1\301\1\0"+
    "\3\3\22\0\2\3\2\0\4\3\1\302\22\3\1\0"+
    "\3\3\22\0\2\3\2\0\17\3\1\303\7\3\1\0"+
    "\3\3\22\0\2\3\2\0\23\3\1\304\3\3\1\0"+
    "\3\3\22\0\2\3\2\0\4\3\1\305\22\3\1\0"+
    "\3\3\22\0\2\3\2\0\4\3\1\306\22\3\1\0"+
    "\3\3\22\0\2\3\2\0\11\3\1\307\15\3\1\0"+
    "\3\3\22\0\2\3\2\0\1\3\1\310\2\3\1\311"+
    "\22\3\1\0\3\3\22\0\2\3\2\0\4\3\1\312"+
    "\22\3\1\0\3\3\22\0\2\3\2\0\14\3\1\313"+
    "\12\3\1\0\3\3\22\0\2\3\2\0\3\3\1\314"+
    "\4\3\1\315\16\3\1\0\3\3\22\0\2\3\2\0"+
    "\1\3\1\316\25\3\1\0\3\3\22\0\2\3\2\0"+
    "\1\317\26\3\1\0\3\3\22\0\2\3\2\0\2\3"+
    "\1\320\24\3\1\0\3\3\22\0\2\3\2\0\26\3"+
    "\1\321\1\0\3\3\22\0\2\3\2\0\16\3\1\322"+
    "\10\3\1\0\3\3\22\0\2\3\2\0\14\3\1\323"+
    "\12\3\1\0\3\3\22\0\2\3\2\0\11\3\1\324"+
    "\15\3\1\0\3\3\22\0\2\3\2\0\15\3\1\325"+
    "\11\3\1\0\3\3\22\0\2\3\2\0\4\3\1\326"+
    "\22\3\1\0\3\3\22\0\2\3\2\0\4\3\1\327"+
    "\22\3\1\0\3\3\22\0\2\3\2\0\4\3\1\330"+
    "\22\3\1\0\3\3\22\0\2\3\2\0\23\3\1\331"+
    "\3\3\1\0\3\3\22\0\2\3\2\0\3\3\1\332"+
    "\23\3\1\0\3\3\22\0\2\3\2\0\16\3\1\333"+
    "\10\3\1\0\3\3\22\0\2\3\2\0\17\3\1\334"+
    "\7\3\1\0\3\3\22\0\2\3\2\0\5\3\1\335"+
    "\21\3\1\0\3\3\22\0\2\3\2\0\1\3\1\336"+
    "\25\3\1\0\3\3\22\0\2\3\2\0\20\3\1\337"+
    "\2\3\1\340\3\3\1\0\3\3\22\0\2\3\2\0"+
    "\14\3\1\341\12\3\1\0\3\3\22\0\2\3\2\0"+
    "\5\3\1\342\21\3\1\0\3\3\22\0\2\3\2\0"+
    "\4\3\1\343\22\3\1\0\3\3\22\0\2\3\2\0"+
    "\23\3\1\344\3\3\1\0\3\3\22\0\2\3\2\0"+
    "\15\3\1\345\11\3\1\0\1\3\1\346\1\3\22\0"+
    "\2\3\2\0\1\3\1\347\25\3\1\0\3\3\22\0"+
    "\2\3\2\0\27\3\1\350\3\3\22\0\2\3\2\0"+
    "\3\3\1\351\23\3\1\0\3\3\22\0\2\3\2\0"+
    "\20\3\1\352\6\3\1\0\3\3\22\0\2\3\2\0"+
    "\16\3\1\353\10\3\1\0\3\3\22\0\2\3\2\0"+
    "\1\3\1\354\25\3\1\0\3\3\22\0\2\3\2\0"+
    "\4\3\1\355\22\3\1\0\3\3\22\0\2\3\2\0"+
    "\3\3\1\356\23\3\1\0\3\3\22\0\2\3\2\0"+
    "\14\3\1\357\12\3\1\0\3\3\22\0\2\3\2\0"+
    "\17\3\1\360\7\3\1\0\3\3\22\0\2\3\2\0"+
    "\15\3\1\361\11\3\1\0\3\3\22\0\2\3\2\0"+
    "\1\3\1\362\25\3\1\0\3\3\22\0\2\3\2\0"+
    "\4\3\1\363\22\3\1\0\3\3\22\0\2\3\2\0"+
    "\3\3\1\364\23\3\1\0\3\3\22\0\2\3\2\0"+
    "\24\3\1\365\2\3\1\0\3\3\22\0\2\3\2\0"+
    "\3\3\1\366\23\3\1\0\3\3\22\0\2\3\2\0"+
    "\10\3\1\367\16\3\1\0\3\3\22\0\2\3\2\0"+
    "\5\3\1\370\21\3\1\0\3\3\22\0\2\3\2\0"+
    "\17\3\1\371\7\3\1\0\3\3\22\0\2\3\2\0"+
    "\14\3\1\372\12\3\1\0\3\3\23\0\1\263\40\0"+
    "\1\373\16\0\2\3\2\0\4\3\1\374\22\3\1\0"+
    "\3\3\22\0\2\3\2\0\14\3\1\375\12\3\1\0"+
    "\3\3\22\0\2\3\2\0\23\3\1\376\3\3\1\0"+
    "\3\3\22\0\2\3\2\0\27\3\1\0\2\3\1\377"+
    "\22\0\2\3\2\0\4\3\1\u0100\22\3\1\0\3\3"+
    "\22\0\2\3\2\0\20\3\1\u0101\6\3\1\0\3\3"+
    "\22\0\2\3\2\0\20\3\1\u0102\6\3\1\0\3\3"+
    "\22\0\2\3\2\0\27\3\1\u0103\3\3\22\0\2\3"+
    "\2\0\1\u0104\26\3\1\0\3\3\22\0\2\3\2\0"+
    "\4\3\1\u0105\22\3\1\0\3\3\22\0\2\3\2\0"+
    "\26\3\1\u0106\1\0\3\3\22\0\2\3\2\0\14\3"+
    "\1\u0107\12\3\1\0\3\3\22\0\2\3\2\0\2\3"+
    "\1\u0108\24\3\1\0\3\3\22\0\2\3\2\0\1\u0109"+
    "\26\3\1\0\3\3\22\0\2\3\2\0\1\u010a\26\3"+
    "\1\0\3\3\22\0\2\3\2\0\23\3\1\u010b\3\3"+
    "\1\0\3\3\22\0\2\3\2\0\1\3\1\u010c\25\3"+
    "\1\0\3\3\22\0\2\3\2\0\17\3\1\u010d\7\3"+
    "\1\0\3\3\22\0\2\3\2\0\16\3\1\u010e\10\3"+
    "\1\0\3\3\22\0\2\3\2\0\10\3\1\u010f\16\3"+
    "\1\0\3\3\22\0\2\3\2\0\3\3\1\u0110\23\3"+
    "\1\0\3\3\22\0\2\3\2\0\4\3\1\u0111\22\3"+
    "\1\0\3\3\22\0\2\3\2\0\24\3\1\u0112\2\3"+
    "\1\0\3\3\22\0\2\3\2\0\23\3\1\u0113\3\3"+
    "\1\0\3\3\22\0\2\3\2\0\25\3\1\u0114\1\3"+
    "\1\0\3\3\22\0\2\3\2\0\23\3\1\u0115\3\3"+
    "\1\0\3\3\22\0\2\3\2\0\4\3\1\u0116\22\3"+
    "\1\0\3\3\22\0\2\3\2\0\4\3\1\u0117\22\3"+
    "\1\0\3\3\22\0\2\3\2\0\17\3\1\u0118\7\3"+
    "\1\0\3\3\22\0\2\3\2\0\10\3\1\u0119\16\3"+
    "\1\0\3\3\22\0\2\3\2\0\1\u011a\26\3\1\0"+
    "\3\3\22\0\2\3\2\0\1\u011b\26\3\1\0\3\3"+
    "\22\0\2\3\2\0\21\3\1\u011c\5\3\1\0\3\3"+
    "\22\0\2\3\2\0\12\3\1\u011d\14\3\1\0\3\3"+
    "\22\0\2\3\2\0\4\3\1\u011e\22\3\1\0\3\3"+
    "\22\0\2\3\2\0\23\3\1\u011f\3\3\1\0\3\3"+
    "\22\0\2\3\2\0\20\3\1\u0120\6\3\1\0\3\3"+
    "\22\0\2\3\2\0\16\3\1\u0121\10\3\1\0\3\3"+
    "\22\0\2\3\2\0\1\u0122\26\3\1\0\3\3\46\0"+
    "\1\u0123\34\0\2\3\2\0\1\u0124\26\3\1\0\3\3"+
    "\22\0\2\3\2\0\26\3\1\u0125\1\0\3\3\22\0"+
    "\2\3\2\0\1\u0126\26\3\1\0\3\3\22\0\2\3"+
    "\2\0\10\3\1\u0127\16\3\1\0\3\3\22\0\2\3"+
    "\2\0\27\3\1\u0128\3\3\22\0\2\3\2\0\1\u0129"+
    "\26\3\1\0\3\3\22\0\2\3\2\0\12\3\1\u012a"+
    "\14\3\1\0\3\3\22\0\2\3\2\0\17\3\1\u012b"+
    "\7\3\1\0\3\3\22\0\2\3\2\0\23\3\1\u012c"+
    "\3\3\1\0\3\3\22\0\2\3\2\0\1\3\1\u012d"+
    "\25\3\1\0\3\3\22\0\2\3\2\0\1\u012e\26\3"+
    "\1\0\3\3\22\0\2\3\2\0\2\3\1\u012f\24\3"+
    "\1\0\3\3\22\0\2\3\2\0\20\3\1\u0130\6\3"+
    "\1\0\3\3\22\0\2\3\2\0\11\3\1\u0131\15\3"+
    "\1\0\3\3\22\0\2\3\2\0\1\3\1\u0132\25\3"+
    "\1\0\3\3\22\0\2\3\2\0\4\3\1\u0133\22\3"+
    "\1\0\3\3\22\0\2\3\2\0\5\3\1\u0134\21\3"+
    "\1\0\3\3\22\0\2\3\2\0\1\3\1\u0135\25\3"+
    "\1\0\3\3\22\0\2\3\2\0\10\3\1\u0136\16\3"+
    "\1\0\3\3\22\0\2\3\2\0\4\3\1\u0137\22\3"+
    "\1\0\3\3\22\0\2\3\2\0\1\u0138\26\3\1\0"+
    "\3\3\56\0\1\u0139\24\0\2\3\2\0\6\3\1\u013a"+
    "\20\3\1\0\3\3\22\0\2\3\2\0\15\3\1\u013b"+
    "\11\3\1\0\3\3\22\0\2\3\2\0\1\u013c\26\3"+
    "\1\0\3\3\22\0\2\3\2\0\1\3\1\u013d\25\3"+
    "\1\0\3\3\22\0\2\3\2\0\10\3\1\u013e\16\3"+
    "\1\0\3\3\22\0\2\3\2\0\4\3\1\u013f\22\3"+
    "\1\0\3\3\22\0\2\3\2\0\10\3\1\u0140\16\3"+
    "\1\0\3\3\22\0\2\3\2\0\23\3\1\u0141\3\3"+
    "\1\0\3\3\22\0\2\3\2\0\1\3\1\u0142\25\3"+
    "\1\0\3\3\22\0\2\3\2\0\3\3\1\u0143\23\3"+
    "\1\0\3\3\22\0\2\3\2\0\20\3\1\u0144\6\3"+
    "\1\0\3\3\22\0\2\3\2\0\4\3\1\u0145\22\3"+
    "\1\0\3\3\22\0\2\3\2\0\5\3\1\u0146\21\3"+
    "\1\0\3\3\22\0\2\3\2\0\1\3\1\u0147\25\3"+
    "\1\0\3\3\22\0\2\3\2\0\1\u0148\26\3\1\0"+
    "\3\3\22\0\2\3\2\0\27\3\1\u0149\3\3\22\0"+
    "\2\3\2\0\20\3\1\u014a\6\3\1\0\3\3\22\0"+
    "\2\3\2\0\1\u014b\26\3\1\0\3\3\22\0\2\3"+
    "\2\0\23\3\1\u014c\3\3\1\0\3\3\22\0\2\3"+
    "\2\0\4\3\1\u014d\22\3\1\0\3\3\22\0\2\3"+
    "\2\0\4\3\1\u014e\22\3\1\0\3\3\22\0\2\3"+
    "\2\0\1\u014f\26\3\1\0\3\3\22\0\2\3\2\0"+
    "\27\3\1\u0150\3\3\22\0\2\3\2\0\4\3\1\u0151"+
    "\22\3\1\0\3\3\22\0\2\3\2\0\4\3\1\u0152"+
    "\22\3\1\0\3\3\44\0\1\u0153\36\0\2\3\2\0"+
    "\27\3\1\u0154\3\3\22\0\2\3\2\0\21\3\1\u0155"+
    "\5\3\1\0\3\3\43\0\1\u0156\37\0\2\3\2\0"+
    "\10\3\1\u0157\16\3\1\0\3\3\22\0\2\3\2\0"+
    "\4\3\1\u0158\22\3\1\0\3\3\22\0\2\3\2\0"+
    "\4\3\1\u0159\22\3\1\0\3\3\22\0\2\3\2\0"+
    "\4\3\1\u015a\22\3\1\0\3\3\22\0\2\3\2\0"+
    "\14\3\1\u015b\12\3\1\0\3\3\22\0\2\3\2\0"+
    "\27\3\1\u015c\3\3\22\0\2\3\2\0\1\3\1\u015d"+
    "\25\3\1\0\3\3\22\0\2\3\2\0\21\3\1\u015e"+
    "\5\3\1\0\3\3\22\0\2\3\2\0\15\3\1\u015f"+
    "\11\3\1\0\3\3\22\0\2\3\2\0\23\3\1\u0160"+
    "\3\3\1\0\3\3\22\0\2\3\2\0\6\3\1\u0161"+
    "\20\3\1\0\3\3\22\0\2\3\2\0\1\u0162\26\3"+
    "\1\0\3\3\22\0\2\3\2\0\20\3\1\u0163\6\3"+
    "\1\0\3\3\22\0\2\3\2\0\20\3\1\u0164\6\3"+
    "\1\0\3\3\43\0\1\u0165\37\0\2\3\2\0\10\3"+
    "\1\u0166\16\3\1\0\3\3\22\0\2\3\2\0\5\3"+
    "\1\u0167\21\3\1\0\3\3\22\0\2\3\2\0\17\3"+
    "\1\u0168\7\3\1\0\3\3\22\0\2\3\2\0\2\3"+
    "\1\u0169\24\3\1\0\3\3\22\0\2\3\2\0\4\3"+
    "\1\u016a\22\3\1\0\3\3\22\0\2\3\2\0\3\3"+
    "\1\u016b\23\3\1\0\3\3\22\0\2\3\2\0\1\u016c"+
    "\26\3\1\0\3\3\22\0\2\3\2\0\14\3\1\u016d"+
    "\12\3\1\0\3\3\22\0\2\3\2\0\23\3\1\u016e"+
    "\3\3\1\0\3\3\56\0\1\u016f\24\0\2\3\2\0"+
    "\1\3\1\u0170\25\3\1\0\3\3\30\0\1\u0171\61\0"+
    "\1\u0172\57\0\1\u0173\52\0\2\3\2\0\20\3\1\u0174"+
    "\6\3\1\0\3\3\44\0\1\u0175\36\0\2\3\2\0"+
    "\15\3\1\u0176\11\3\1\0\3\3\22\0\2\3\2\0"+
    "\20\3\1\u0177\6\3\1\0\3\3\22\0\2\3\2\0"+
    "\4\3\1\u0178\22\3\1\0\3\3\56\0\1\u0179\24\0"+
    "\2\3\2\0\14\3\1\u017a\12\3\1\0\3\3\22\0"+
    "\2\3\2\0\23\3\1\u017b\3\3\1\0\3\3\22\0"+
    "\2\3\2\0\13\3\1\u017c\13\3\1\0\3\3\22\0"+
    "\2\3\2\0\16\3\1\u017d\10\3\1\0\3\3\22\0"+
    "\2\3\2\0\4\3\1\u017e\22\3\1\0\3\3\22\0"+
    "\2\3\2\0\14\3\1\u017f\12\3\1\0\3\3\36\0"+
    "\1\u0180\44\0\2\3\2\0\20\3\1\u0181\6\3\1\0"+
    "\3\3\22\0\2\3\2\0\4\3\1\u0182\22\3\1\0"+
    "\3\3\22\0\2\3\2\0\4\3\1\u0183\22\3\1\0"+
    "\3\3\22\0\2\3\2\0\4\3\1\u0184\22\3\1\0"+
    "\3\3\22\0\2\3\2\0\1\u0185\26\3\1\0\3\3"+
    "\43\0\1\u0186\37\0\2\3\2\0\10\3\1\u0187\16\3"+
    "\1\0\3\3\41\0\1\u0188\50\0\1\u0189\70\0\1\u018a"+
    "\45\0\1\u018b\54\0\2\3\2\0\20\3\1\u018c\6\3"+
    "\1\0\3\3\22\0\2\3\2\0\14\3\1\u018d\12\3"+
    "\1\0\3\3\43\0\1\u018e\37\0\2\3\2\0\12\3"+
    "\1\u018f\14\3\1\0\3\3\22\0\2\3\2\0\6\3"+
    "\1\u0190\20\3\1\0\3\3\22\0\2\3\2\0\23\3"+
    "\1\u0191\3\3\1\0\3\3\22\0\2\3\2\0\23\3"+
    "\1\u0192\3\3\1\0\3\3\46\0\1\u0193\34\0\2\3"+
    "\2\0\1\u0194\26\3\1\0\3\3\22\0\2\3\2\0"+
    "\5\3\1\u0195\21\3\1\0\3\3\36\0\1\u0196\44\0"+
    "\2\3\2\0\20\3\1\u0197\6\3\1\0\3\3\32\0"+
    "\1\u0198\50\0\2\3\2\0\4\3\1\u0199\22\3\1\0"+
    "\3\3\36\0\1\u019a\44\0\2\3\2\0\4\3\1\u019b"+
    "\22\3\1\0\3\3\22\0\2\3\2\0\4\3\1\u019c"+
    "\22\3\1\0\3\3\46\0\1\u019d\34\0\2\3\2\0"+
    "\1\u019e\26\3\1\0\3\3\51\0\1\u019f\31\0\2\3"+
    "\2\0\5\3\1\u01a0\21\3\1\0\3\3\46\0\1\u01a1"+
    "\34\0\2\3\2\0\17\3\1\u01a2\7\3\1\0\3\3"+
    "\55\0\1\u01a3\25\0\2\3\2\0\4\3\1\u01a4\22\3"+
    "\1\0\3\3\56\0\1\u01a5\24\0\2\3\2\0\20\3"+
    "\1\u01a6\6\3\1\0\3\3\43\0\1\u01a7\37\0\2\3"+
    "\2\0\1\u01a8\26\3\1\0\3\3\36\0\1\u01a9\70\0"+
    "\1\u01aa\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16072];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\25\1\1\11\2\1\4\11"+
    "\3\1\6\11\1\1\1\0\67\1\1\0\3\11\1\0"+
    "\111\1\1\0\1\11\63\1\1\0\22\1\1\11\7\1"+
    "\1\0\37\1\1\0\4\1\1\0\20\1\1\0\17\1"+
    "\1\0\6\1\1\0\2\1\2\0\1\1\1\0\5\1"+
    "\1\0\10\1\1\0\11\1\1\0\1\1\3\0\1\1"+
    "\1\0\3\1\1\0\6\1\1\0\5\1\1\0\1\1"+
    "\3\11\1\0\2\1\1\0\4\1\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { lexeme=yytext(); return S_MODULO;
          }
        case 115: break;
        case 102: 
          { lexeme=yytext(); return PR_FUNCTION;
          }
        case 116: break;
        case 53: 
          { lexeme=yytext(); return PR_CHAR;
          }
        case 117: break;
        case 59: 
          { lexeme=yytext(); return PR_BEGIN;
          }
        case 118: break;
        case 60: 
          { lexeme=yytext(); return PR_LIMIT;
          }
        case 119: break;
        case 94: 
          { lexeme=yytext(); return PR_TRUNCATE;
          }
        case 120: break;
        case 30: 
          { lexeme=yytext(); return FLOAT;
          }
        case 121: break;
        case 97: 
          { lexeme=yytext(); return PR_DESCRIBE;
          }
        case 122: break;
        case 33: 
          { lexeme=yytext(); return AND;
          }
        case 123: break;
        case 22: 
          { lexeme=yytext(); return PR_AS;
          }
        case 124: break;
        case 66: 
          { lexeme=yytext(); return PR_GRANT;
          }
        case 125: break;
        case 56: 
          { lexeme=yytext(); return PR_FROM;
          }
        case 126: break;
        case 79: 
          { lexeme=yytext(); return PR_CHANGE;
          }
        case 127: break;
        case 20: 
          { lexeme=yytext(); return PUNTO;
          }
        case 128: break;
        case 71: 
          { lexeme=yytext(); return PR_SELECT;
          }
        case 129: break;
        case 21: 
          { lexeme=yytext(); return PR_TO;
          }
        case 130: break;
        case 100: 
          { lexeme=yytext(); return PR_NOT_NULL;
          }
        case 131: break;
        case 104: 
          { lexeme=yytext(); return PR_PASSWORD;
          }
        case 132: break;
        case 48: 
          { lexeme=yytext(); return PR_DATE;
          }
        case 133: break;
        case 106: 
          { lexeme=yytext(); return PR_SAVEPOINT;
          }
        case 134: break;
        case 78: 
          { lexeme=yytext(); return PR_CREATE;
          }
        case 135: break;
        case 4: 
          { /* */
          }
        case 136: break;
        case 107: 
          { lexeme=yytext(); return PR_DATABASES;
          }
        case 137: break;
        case 40: 
          { lexeme=yytext(); return CADENA_CARACT;
          }
        case 138: break;
        case 65: 
          { lexeme=yytext(); return PR_UNION;
          }
        case 139: break;
        case 63: 
          { lexeme=yytext(); return PR_WHILE;
          }
        case 140: break;
        case 110: 
          { lexeme=yytext(); return PR_CONSTRAINT;
          }
        case 141: break;
        case 16: 
          { lexeme=yytext(); return S_RESTA;
          }
        case 142: break;
        case 36: 
          { lexeme=yytext(); return PR_INT;
          }
        case 143: break;
        case 64: 
          { lexeme=yytext(); return PR_CHECK;
          }
        case 144: break;
        case 45: 
          { lexeme=yytext(); return PR_ELSE;
          }
        case 145: break;
        case 29: 
          { lexeme=yytext(); return MAYORIG;
          }
        case 146: break;
        case 43: 
          { lexeme=yytext(); return LIKE;
          }
        case 147: break;
        case 58: 
          { lexeme=yytext(); return PR_ALTER;
          }
        case 148: break;
        case 9: 
          { lexeme=yytext(); return P_CLOSE;
          }
        case 149: break;
        case 1: 
          { return ERROR;
          }
        case 150: break;
        case 109: 
          { lexeme=yytext(); return PR_I_JOIN;
          }
        case 151: break;
        case 44: 
          { lexeme=yytext(); return PR_LOOP;
          }
        case 152: break;
        case 77: 
          { lexeme=yytext(); return PR_COMMIT;
          }
        case 153: break;
        case 90: 
          { lexeme=yytext(); return PR_VARCHAR;
          }
        case 154: break;
        case 25: 
          { lexeme=yytext(); return PR_ON;
          }
        case 155: break;
        case 39: 
          { lexeme=yytext(); return PR_FOR;
          }
        case 156: break;
        case 80: 
          { lexeme=yytext(); return PR_OFFSET;
          }
        case 157: break;
        case 15: 
          { lexeme=yytext(); return S_SUMA;
          }
        case 158: break;
        case 93: 
          { lexeme=yytext(); return PR_PRIMARY;
          }
        case 159: break;
        case 69: 
          { lexeme=yytext(); return PR_BIGINT;
          }
        case 160: break;
        case 89: 
          { lexeme=yytext(); return PR_DEFAULT;
          }
        case 161: break;
        case 85: 
          { lexeme=yytext(); return PR_HAVING;
          }
        case 162: break;
        case 74: 
          { lexeme=yytext(); return PR_VALUES;
          }
        case 163: break;
        case 11: 
          { lexeme=yytext(); return LLAVE_C;
          }
        case 164: break;
        case 75: 
          { lexeme=yytext(); return PR_INSERT;
          }
        case 165: break;
        case 6: 
          { lexeme=yytext(); return PUNTOYC;
          }
        case 166: break;
        case 96: 
          { lexeme=yytext(); return PR_DATETIME;
          }
        case 167: break;
        case 68: 
          { lexeme=yytext(); return PR_TABLES;
          }
        case 168: break;
        case 51: 
          { lexeme=yytext(); return PR_VIEW;
          }
        case 169: break;
        case 13: 
          { lexeme=yytext(); return MENORQ;
          }
        case 170: break;
        case 19: 
          { lexeme=yytext(); return S_MULT;
          }
        case 171: break;
        case 91: 
          { lexeme=yytext(); return PR_FOREIGN;
          }
        case 172: break;
        case 42: 
          { lexeme=yytext(); return PR_TIME;
          }
        case 173: break;
        case 99: 
          { lexeme=yytext(); return PR_ORDER_BY;
          }
        case 174: break;
        case 23: 
          { lexeme=yytext(); return IN;
          }
        case 175: break;
        case 31: 
          { lexeme=yytext(); return PR_ASC;
          }
        case 176: break;
        case 49: 
          { lexeme=yytext(); return PR_DESC;
          }
        case 177: break;
        case 92: 
          { lexeme=yytext(); return PR_REPLACE;
          }
        case 178: break;
        case 17: 
          { lexeme=yytext(); return S_DIV;
          }
        case 179: break;
        case 108: 
          { lexeme=yytext(); return PR_PROCEDURE;
          }
        case 180: break;
        case 87: 
          { lexeme=yytext(); return PR_DECLARE;
          }
        case 181: break;
        case 76: 
          { lexeme=yytext(); return PR_COLUMN;
          }
        case 182: break;
        case 3: 
          { lexeme=yytext(); return INT;
          }
        case 183: break;
        case 103: 
          { lexeme=yytext(); return PR_ROLLBACK;
          }
        case 184: break;
        case 41: 
          { lexeme=yytext(); return PR_TEXT;
          }
        case 185: break;
        case 111: 
          { lexeme=yytext(); return PR_REFERENCES;
          }
        case 186: break;
        case 101: 
          { lexeme=yytext(); return PR_GROUP_BY;
          }
        case 187: break;
        case 73: 
          { lexeme=yytext(); return PR_DOUBLE;
          }
        case 188: break;
        case 34: 
          { lexeme=yytext(); return PR_END;
          }
        case 189: break;
        case 8: 
          { lexeme=yytext(); return P_OPEN;
          }
        case 190: break;
        case 5: 
          { return SALTO_DL;
          }
        case 191: break;
        case 114: 
          { lexeme=yytext(); return PR_FO_JOIN;
          }
        case 192: break;
        case 112: 
          { lexeme=yytext(); return PR_R_JOIN;
          }
        case 193: break;
        case 37: 
          { lexeme=yytext(); return PR_KEY;
          }
        case 194: break;
        case 47: 
          { lexeme=yytext(); return PR_SHOW;
          }
        case 195: break;
        case 113: 
          { lexeme=yytext(); return PR_AUTO_INCREMENT;
          }
        case 196: break;
        case 82: 
          { lexeme=yytext(); return PR_UPDATE;
          }
        case 197: break;
        case 7: 
          { lexeme=yytext(); return COMA;
          }
        case 198: break;
        case 38: 
          { lexeme=yytext(); return NOT;
          }
        case 199: break;
        case 35: 
          { lexeme=yytext(); return PR_SET;
          }
        case 200: break;
        case 70: 
          { lexeme=yytext(); return PR_STORED;
          }
        case 201: break;
        case 72: 
          { lexeme=yytext(); return PR_DELETE;
          }
        case 202: break;
        case 26: 
          { lexeme=yytext(); return OR;
          }
        case 203: break;
        case 86: 
          { lexeme=yytext(); return BETWEEN;
          }
        case 204: break;
        case 54: 
          { lexeme=yytext(); return PR_USER;
          }
        case 205: break;
        case 10: 
          { lexeme=yytext(); return LLAVE_A;
          }
        case 206: break;
        case 67: 
          { lexeme=yytext(); return PR_FLOAT;
          }
        case 207: break;
        case 27: 
          { lexeme=yytext(); return MENORIG;
          }
        case 208: break;
        case 2: 
          { lexeme=yytext(); return IDENTIFICADOR;
          }
        case 209: break;
        case 14: 
          { lexeme=yytext(); return MAYORQ;
          }
        case 210: break;
        case 57: 
          { lexeme=yytext(); return PR_TABLE;
          }
        case 211: break;
        case 28: 
          { lexeme=yytext(); return NOIGUAL;
          }
        case 212: break;
        case 61: 
          { lexeme=yytext(); return PR_INDEX;
          }
        case 213: break;
        case 98: 
          { lexeme=yytext(); return PR_DISTINCT;
          }
        case 214: break;
        case 105: 
          { lexeme=yytext(); return PR_L_JOIN;
          }
        case 215: break;
        case 62: 
          { lexeme=yytext(); return PR_WHERE;
          }
        case 216: break;
        case 81: 
          { lexeme=yytext(); return PR_UNIQUE;
          }
        case 217: break;
        case 83: 
          { lexeme=yytext(); return PR_REVOKE;
          }
        case 218: break;
        case 55: 
          { lexeme=yytext(); return PR_NULL;
          }
        case 219: break;
        case 12: 
          { lexeme=yytext(); return IGUAL;
          }
        case 220: break;
        case 24: 
          { lexeme=yytext(); return PR_IF;
          }
        case 221: break;
        case 32: 
          { lexeme=yytext(); return PR_ADD;
          }
        case 222: break;
        case 88: 
          { lexeme=yytext(); return PR_DECIMAL;
          }
        case 223: break;
        case 52: 
          { lexeme=yytext(); return PR_INTO;
          }
        case 224: break;
        case 50: 
          { lexeme=yytext(); return PR_DROP;
          }
        case 225: break;
        case 46: 
          { lexeme=yytext(); return PR_ENUM;
          }
        case 226: break;
        case 95: 
          { lexeme=yytext(); return PR_DATABASE;
          }
        case 227: break;
        case 84: 
          { lexeme=yytext(); return PR_RENAME;
          }
        case 228: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
